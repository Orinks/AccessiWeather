# Product Requirements Document: AccessiWeather Toga Migration

## Overview
Migrate the AccessiWeather application from wxPython to the BeeWare Toga framework, preserving all core features, accessibility, and cross-platform support. The migration must ensure that the user experience, accessibility, and performance are maintained or improved. The service/business logic layer should remain unchanged where possible.

## Goals
- Replace all wxPython-based GUI components with Toga equivalents
- Maintain or improve accessibility (screen reader, keyboard navigation)
- Ensure cross-platform compatibility (Windows, macOS, Linux)
- Preserve all current features and workflows
- Optimize for performance and maintainability

## Scope
- Main application window and layout
- All dialogs and modal windows
- System tray and notification features (with Toga-appropriate alternatives)
- Event handling and background operations (migrate to asyncio where needed)
- Accessibility features and testing
- Configuration and settings dialogs
- Testing and CI adjustments for Toga
- Documentation updates

## Out of Scope
- Major changes to business/service logic
- New features unrelated to migration

## Requirements
### Functional
1. The main window must use Toga's MainWindow and Box layout system
2. All wxPython widgets (Frame, Panel, StaticText, TextCtrl, Choice, Button, ListCtrl, Timer, Dialog, Notebook, MenuBar, etc.) must be replaced with Toga equivalents (see mapping in migration analysis)
3. Dialogs must use Toga secondary windows or built-in dialogs
4. System tray functionality must be replaced with notifications or always-visible window (Toga does not support system tray)
5. All event handling must use Toga's event and async model
6. Accessibility must be tested and preserved using Toga's native features and workarounds for known limitations
7. All background operations (timers, threads) must be migrated to asyncio tasks
8. All configuration dialogs and settings must be ported to Toga
9. All platform-specific code must be reviewed and adapted for Toga's cross-platform approach
10. All tests that depend on wxPython must be migrated or replaced with Toga-compatible tests
11. Documentation must be updated to reflect Toga usage and installation

### Non-Functional
- Accessibility: All features must be usable with screen readers and keyboard navigation
- Performance: App must be as responsive as the wxPython version
- Maintainability: Code should be modular, readable, and follow Toga best practices
- Cross-platform: All features must work on Windows, macOS, and Linux

## Risks & Mitigations
- System tray not supported in Toga: Use notifications or always-visible window
- Accessibility differences: Early and repeated testing with screen readers
- Complex dialog layouts: Redesign as needed for Toga's layout system
- Keyboard shortcuts: Research and implement using Toga's event system
- Background operations: Use asyncio and test update mechanisms

## Phases
1. Research and Foundation
   - Analyze component mapping
   - Create basic Toga app structure
   - Implement menu system and main layout
   - Test basic accessibility
2. Core UI Migration
   - Weather data display
   - Forecast and alert display
   - Location selection and refresh
3. Dialog System Migration
   - Settings, location, discussion, and alert dialogs
4. Advanced Features
   - Background updates, keyboard shortcuts, notifications, error handling
5. Testing and Refinement
   - Accessibility, cross-platform, user experience, documentation

## Success Criteria
- All current functionality preserved
- Accessibility maintained or improved
- Cross-platform compatibility achieved
- Performance maintained or improved
- User experience preserved
