[tox]
envlist = py312, py311, py310, lint, type-check, briefcase-test
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Use beeware-venv compatible setup
deps =
    pytest>=7.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0
    toga-dummy>=0.4.0
    Pillow>=9.0.0
    httpx>=0.24.0
    requests>=2.28.0

# Set environment variables for Toga testing
setenv =
    TOGA_BACKEND = toga_dummy
    PYTHONPATH = {toxinidir}/src

# Install the package in development mode
usedevelop = true

# Run tests with coverage
commands =
    pytest {posargs:tests/test_simple_app.py tests/toga_test_helpers.py -v --cov=accessiweather.simple --cov-report=term-missing --cov-report=xml}

[testenv:py312]
basepython = python3.12

[testenv:py311]
basepython = python3.11

[testenv:py310]
basepython = python3.10

[testenv:lint]
deps =
    ruff>=0.1.0
commands =
    ruff check src tests
    ruff format --check src tests

[testenv:type-check]
deps =
    mypy>=1.0.0
    types-requests
    types-Pillow
commands =
    mypy src/accessiweather/simple --ignore-missing-imports

[testenv:briefcase-test]
# Test using briefcase dev --test (requires briefcase in environment)
deps =
    {[testenv]deps}
    briefcase>=0.3.17
allowlist_externals =
    briefcase
commands =
    briefcase dev --test

[testenv:async-tests]
# Focused async testing environment
deps = {[testenv]deps}
commands =
    pytest tests/test_simple_app.py::TestAccessiWeatherAppAsyncOperations -v --cov=accessiweather.simple

[testenv:toga-tests]
# Focused Toga testing environment
deps = {[testenv]deps}
commands =
    pytest tests/test_simple_app.py::TestAccessiWeatherAppAsyncOperations::test_toga_dummy_backend_setup -v
    pytest tests/test_simple_app.py::TestAccessiWeatherAppAsyncOperations::test_weather_data_factory -v

[testenv:accessibility-tests]
# Test accessibility-related functionality
deps = {[testenv]deps}
commands =
    pytest tests/test_simple_app.py -k "accessibility or temperature or format" -v

[testenv:integration]
# Full integration testing
deps = {[testenv]deps}
commands =
    pytest tests/test_simple_app.py tests/test_simple_weather_client.py -v --cov=accessiweather.simple --cov-report=term-missing

[testenv:clean]
# Clean up test artifacts
deps =
skip_install = true
allowlist_externals =
    rm
    del
commands =
    python -c "import shutil, os; [shutil.rmtree(p, ignore_errors=True) for p in ['.coverage', '.pytest_cache', 'htmlcov', '.tox', '__pycache__']]"

[coverage:run]
source = src/accessiweather/simple
omit =
    */tests/*
    */test_*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:

[flake8]
max-line-length = 100
extend-ignore = E203, W503
exclude = .tox,.git,__pycache__,build,dist,*.egg

[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
asyncio_mode = auto
addopts =
    --strict-markers
    --disable-warnings
    --tb=short
markers =
    asyncio: marks tests as async
    slow: marks tests as slow
    integration: marks tests as integration tests
    accessibility: marks tests related to accessibility features
    toga: marks tests specific to Toga framework
    wx_only: marks tests that only run with wxPython (skip in Toga environment)
