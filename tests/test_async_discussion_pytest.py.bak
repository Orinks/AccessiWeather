import pytest
import queue
import wx  # type: ignore
from unittest.mock import MagicMock, patch

from accessiweather.gui.weather_app import WeatherApp
from accessiweather.gui.dialogs import WeatherDiscussionDialog
from accessiweather.api_client import NoaaApiClient, ApiClientError

# Import our test utilities
from tests.wx_test_utils import AsyncEventWaiter


# Use the wx_app fixture from conftest.py


@pytest.fixture
def frame(wx_app):
    frame = wx.Frame(None)
    # Frame needs to be shown for event loop processing in some cases
    # frame.Show() # Optional: Show frame if needed, but usually not required
    yield frame
    frame.Destroy()


@pytest.fixture
def mock_api_client():
    mock_client = MagicMock(spec=NoaaApiClient)
    # Configure default return value, can be overridden in tests
    mock_client.get_discussion.return_value = "Sample discussion text"
    return mock_client


@pytest.fixture
def mock_location_manager():
    manager = MagicMock()
    manager.get_current_location.return_value = ("Test Location", 35.0, -80.0)
    return manager


@pytest.fixture
def event_queue():
    return queue.Queue()


@pytest.fixture
def mock_dialogs(monkeypatch, event_queue):
    # Mock ProgressDialog - Keep as is, seems fine
    progress_dialog_mock = MagicMock()
    progress_dialog_mock.Pulse.return_value = None
    progress_dialog_mock.Destroy.return_value = None
    monkeypatch.setattr(
        wx, 'ProgressDialog',
        lambda *args, **kwargs: progress_dialog_mock
    )

    # Mock MessageBox - Keep as is
    def mock_message_box(*args, **kwargs):
        event_queue.put(("error_shown", args[0]))
        return None
    monkeypatch.setattr(wx, 'MessageBox', mock_message_box)

    # Mock WeatherDiscussionDialog - Keep as is
    discussion_dialog_mock = MagicMock()
    discussion_dialog_mock.ShowModal.return_value = None
    discussion_dialog_mock.Destroy.return_value = None

    def mock_discussion_dialog_init(self, parent, title, text):
        event_queue.put(("dialog_shown", text))
        # Simulate basic attributes needed if accessed later
        self.text = text
        self.parent = parent
        self.title = title
        # Assign mock methods
        self.ShowModal = discussion_dialog_mock.ShowModal
        self.Destroy = discussion_dialog_mock.Destroy

    # Patch __init__; this covers ShowModal/Destroy for instances created
    # via this mock init.
    monkeypatch.setattr(
        WeatherDiscussionDialog,
        '__init__',
        mock_discussion_dialog_init
    )
    # Ensure ShowModal/Destroy are patched on the class if needed elsewhere
    # monkeypatch.setattr(WeatherDiscussionDialog, 'ShowModal', lambda s: None)
    # monkeypatch.setattr(WeatherDiscussionDialog, 'Destroy', lambda s: None)

    # No longer mocking safe_call_after - let wx.CallAfter run

    return {
        "progress_dialog": progress_dialog_mock,
        "discussion_dialog": discussion_dialog_mock
    }


def test_discussion_fetched_asynchronously(
    wx_app, frame, mock_api_client, mock_location_manager, event_queue,
    mock_dialogs
):
    """Test discussion fetch and UI update via wx.CallAfter."""
    app = WeatherApp(
        frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=MagicMock()
    )
    app.discussion_btn = MagicMock()  # Mock the button
    event = MagicMock()  # Mock the event object for the handler

    # Configure API mock response for this specific test
    expected_discussion = "Async discussion success!"
    mock_api_client.get_discussion.return_value = expected_discussion

    # Create an event waiter to track when the callback completes
    waiter = AsyncEventWaiter()

    # --- Patch the callback method on the app instance ---
    # Get the original bound method from the instance
    assert hasattr(app, '_on_discussion_fetched'), "No _on_discussion_fetched"
    original_success_callback = app._on_discussion_fetched

    # Define the wrapper function with the correct signature
    def wrapper_on_success(discussion_text, name, loading_dialog):
        # Call the original callback logic first
        original_success_callback(discussion_text, name, loading_dialog)
        # Signal that the callback has completed
        waiter.callback(discussion_text)

    # Use patch.object as a context manager
    with patch.object(app, '_on_discussion_fetched', new=wrapper_on_success):
        # Call the method that triggers fetching
        app.OnViewDiscussion(event)

        # Wait for the callback to complete (with timeout)
        result = waiter.wait(timeout_ms=5000)

        # Verify the result matches what we expected
        assert result == expected_discussion

    # Verify the API call was made correctly (in the background thread)
    mock_api_client.get_discussion.assert_called_once_with(35.0, -80.0)

    # Verify dialog creation was triggered (via callback on main thread)
    dialog_event = None
    try:
        # Should be there now
        dialog_event = event_queue.get(block=False)
    except queue.Empty:
        pass

    assert dialog_event is not None, (
        "Dialog event not found in queue after callback"
    )
    assert dialog_event[0] == "dialog_shown", (
        f"Expected 'dialog_shown', got {dialog_event[0]}"
    )
    assert dialog_event[1] == expected_discussion, (
        f"Expected '{expected_discussion}', got {dialog_event[1]}"
    )

    # Check that button was re-enabled (in the callback)
    app.discussion_btn.Enable.assert_called_once()


def test_discussion_error_handling(
    wx_app, frame, mock_api_client, mock_location_manager, event_queue,
    mock_dialogs
):
    """Test discussion fetch error handling via wx.CallAfter."""
    app = WeatherApp(
        frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=MagicMock()
    )
    app.discussion_btn = MagicMock()
    event = MagicMock()

    # Configure API mock to raise an error
    error_message = "Network error fetching discussion"
    mock_api_client.get_discussion.side_effect = ApiClientError(error_message)

    # Create an event waiter to track when the error callback completes
    waiter = AsyncEventWaiter()

    # --- Patch the error callback method on the app instance ---
    # Get the original bound method from the instance
    assert hasattr(app, '_on_discussion_error'), "Missing _on_discussion_error"
    original_error_callback = app._on_discussion_error

    # Define the wrapper function with the correct signature
    def wrapper_on_error(error, name, loading_dialog):
        # Call the original callback logic first
        original_error_callback(error, name, loading_dialog)
        # Signal that the callback has completed with the error
        waiter.callback(error)

    # Use patch.object as a context manager
    with patch.object(app, '_on_discussion_error', new=wrapper_on_error):
        # Call the method that triggers fetching
        app.OnViewDiscussion(event)

        # Wait for the callback to complete (with timeout)
        result = waiter.wait(timeout_ms=5000)

        # Verify we got an error object back
        assert isinstance(result, ApiClientError)
        assert str(result) == error_message

    # Verify the API call was made
    mock_api_client.get_discussion.assert_called_once_with(35.0, -80.0)

    # Verify error message was shown via event queue (triggered by callback)
    error_event = None
    try:
        error_event = event_queue.get(block=False)
    except queue.Empty:
        pass

    assert error_event is not None, (
        "Error event not found in queue after callback"
    )
    assert error_event[0] == "error_shown", (
        f"Expected 'error_shown', got {error_event[0]}"
    )
    # Check if the original error message is part of the displayed message
    assert error_message in error_event[1], (
        f"Expected '{error_message}' in '{error_event[1]}'"
    )

    # Check that button was re-enabled (in the error callback)
    app.discussion_btn.Enable.assert_called_once()
