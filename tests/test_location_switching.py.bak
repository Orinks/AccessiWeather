"""Tests for location switching functionality."""
import pytest
import wx
from unittest.mock import MagicMock, patch

from accessiweather.gui.weather_app import WeatherApp
from tests.wx_test_utils import AsyncEventWaiter


@pytest.fixture
def mock_components():
    """Mock the components used by WeatherApp."""
    with patch('accessiweather.api_client.NoaaApiClient') as mock_api_client_class, \
         patch('accessiweather.notifications.WeatherNotifier') as mock_notifier_class, \
         patch('accessiweather.location.LocationManager') as mock_location_manager_class:

        # Configure the mock API client
        mock_api_client = mock_api_client_class.return_value
        mock_api_client.get_point_data.return_value = {
            "properties": {
                "forecast": "https://api.weather.gov/gridpoints/RAH/53,88/forecast",
                "forecastHourly": "https://api.weather.gov/gridpoints/RAH/53,88/forecast/hourly",
                "relativeLocation": {
                    "properties": {
                        "city": "Test City",
                        "state": "NC"
                    }
                }
            }
        }

        # Configure the mock location manager with multiple locations
        mock_location_manager = mock_location_manager_class.return_value
        mock_location_manager.get_current_location.return_value = ("Test City", 35.0, -80.0)
        mock_location_manager.get_location_coordinates.return_value = (35.0, -80.0)
        mock_location_manager.saved_locations = {
            "Test City": {"lat": 35.0, "lon": -80.0},
            "New York": {"lat": 40.7, "lon": -74.0},
            "Los Angeles": {"lat": 34.0, "lon": -118.2}
        }
        mock_location_manager.get_all_locations.return_value = [
            "Test City", "New York", "Los Angeles"
        ]

        # Configure the mock notifier
        mock_notifier = mock_notifier_class.return_value

        yield mock_api_client, mock_location_manager, mock_notifier


def test_location_combo_populated(wx_app, mock_components):
    """Test that the location combo box is populated with saved locations."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with _check_api_contact_configured patched to prevent dialogs
    with patch.object(WeatherApp, '_check_api_contact_configured', return_value=None):
        app = WeatherApp(
            parent=parent_frame,
            location_manager=mock_location_manager,
            api_client=mock_api_client,
            notifier=mock_notifier
        )

    # Verify the location choice is populated
    assert app.location_choice.GetCount() == 3
    assert app.location_choice.GetString(0) == "Test City"
    assert app.location_choice.GetString(1) == "New York"
    assert app.location_choice.GetString(2) == "Los Angeles"

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_location_switch_triggers_update(wx_app, mock_components):
    """Test that switching locations triggers a weather update."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with _check_api_contact_configured patched to prevent dialogs
    with patch.object(WeatherApp, '_check_api_contact_configured', return_value=None):
        app = WeatherApp(
            parent=parent_frame,
            location_manager=mock_location_manager,
            api_client=mock_api_client,
            notifier=mock_notifier
        )

    # Reset the API client mock to clear the initial update call
    mock_api_client.reset_mock()

    # Create an event waiter
    waiter = AsyncEventWaiter()

    # Patch the UpdateWeatherData method
    original_update = app.UpdateWeatherData

    def patched_update(*args, **kwargs):
        result = original_update(*args, **kwargs)
        waiter.callback(True)
        return result

    app.UpdateWeatherData = patched_update

    # Update the mock location manager to return new coordinates for New York
    mock_location_manager.get_location_coordinates.return_value = (40.7, -74.0)

    # Simulate selecting a new location from the choice control
    app.location_choice.SetSelection(1)  # Select "New York"
    app.OnLocationChange(None)

    # Wait for the update to complete
    result = waiter.wait(timeout_ms=5000)

    # Verify the update was triggered with the new location
    assert result is True
    mock_location_manager.set_current_location.assert_called_once_with("New York")
    mock_api_client.get_point_data.assert_called_once_with(40.7, -74.0)

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_location_add_button(wx_app, mock_components):
    """Test that the add location button opens the location dialog."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with _check_api_contact_configured patched to prevent dialogs
    with patch.object(WeatherApp, '_check_api_contact_configured', return_value=None):
        app = WeatherApp(
            parent=parent_frame,
            location_manager=mock_location_manager,
            api_client=mock_api_client,
            notifier=mock_notifier
        )

    # Patch the location dialog
    with patch('accessiweather.gui.dialogs.LocationDialog') as mock_dialog_class:
        mock_dialog = MagicMock()
        mock_dialog.ShowModal.return_value = wx.ID_OK
        mock_dialog.GetValues.return_value = ("San Francisco", 37.7, -122.4)
        mock_dialog_class.return_value = mock_dialog

        # Simulate clicking the add location button
        app.OnAddLocation(None)

        # Verify the dialog was shown
        mock_dialog_class.assert_called_once()
        mock_dialog.ShowModal.assert_called_once()

        # Verify the location was added
        mock_location_manager.add_location.assert_called_once_with(
            "San Francisco", 37.7, -122.4
        )

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_location_remove_button(wx_app, mock_components):
    """Test that the remove location button removes the selected location."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with _check_api_contact_configured patched to prevent dialogs
    with patch.object(WeatherApp, '_check_api_contact_configured', return_value=None):
        app = WeatherApp(
            parent=parent_frame,
            location_manager=mock_location_manager,
            api_client=mock_api_client,
            notifier=mock_notifier
        )

    # Patch the message box to return YES
    with patch('wx.MessageBox') as mock_message_box, \
         patch('wx.MessageDialog.ShowModal', return_value=wx.ID_YES):

        # Simulate selecting a location to remove
        app.location_choice.SetSelection(1)  # Select "New York"

        # Simulate clicking the remove location button
        app.OnRemoveLocation(None)

        # Verify the confirmation dialog was shown
        assert mock_message_box.call_count > 0

        # Verify the location was removed
        mock_location_manager.remove_location.assert_called_once_with("New York")

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()
