"""Tests for settings changes functionality."""
import pytest
import wx
import os
import json
import tempfile
from unittest.mock import MagicMock, patch

from accessiweather.gui.weather_app import WeatherApp
from accessiweather.gui.settings_dialog import SettingsDialog
from tests.wx_test_utils import AsyncEventWaiter


@pytest.fixture
def mock_components():
    """Mock the components used by WeatherApp."""
    with patch('accessiweather.api_client.NoaaApiClient') as mock_api_client_class, \
         patch('accessiweather.notifications.WeatherNotifier') as mock_notifier_class, \
         patch('accessiweather.location.LocationManager') as mock_location_manager_class:

        # Configure the mock API client
        mock_api_client = mock_api_client_class.return_value
        mock_api_client.get_point_data.return_value = {
            "properties": {
                "forecast": "https://api.weather.gov/gridpoints/RAH/53,88/forecast",
                "forecastHourly": "https://api.weather.gov/gridpoints/RAH/53,88/forecast/hourly",
                "relativeLocation": {
                    "properties": {
                        "city": "Test City",
                        "state": "NC"
                    }
                }
            }
        }

        # Configure the mock location manager
        mock_location_manager = mock_location_manager_class.return_value
        mock_location_manager.get_current_location.return_value = ("Test City", 35.0, -80.0)
        mock_location_manager.get_location_coordinates.return_value = (35.0, -80.0)
        mock_location_manager.saved_locations = {
            "Test City": {"lat": 35.0, "lon": -80.0}
        }

        # Configure the mock notifier
        mock_notifier = mock_notifier_class.return_value

        yield mock_api_client, mock_location_manager, mock_notifier


@pytest.fixture
def temp_config_file():
    """Create a temporary config file."""
    with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as temp_file:
        # Create a default config
        default_config = {
            "settings": {
                "update_interval_minutes": 30,
                "api_contact": "test@example.com",
                "alert_radius_miles": 25
            }
        }
        temp_file.write(json.dumps(default_config).encode('utf-8'))
        temp_file_path = temp_file.name

    yield temp_file_path

    # Clean up
    if os.path.exists(temp_file_path):
        os.unlink(temp_file_path)


def test_settings_dialog_shows_current_settings(wx_app, mock_components, temp_config_file):
    """Test that the settings dialog shows the current settings."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with the temp config file
    app = WeatherApp(
        parent=parent_frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=mock_notifier,
        config_path=temp_config_file
    )

    # Patch the settings dialog
    with patch('accessiweather.gui.settings_dialog.SettingsDialog') as mock_dialog_class:
        mock_dialog = MagicMock()
        mock_dialog.ShowModal.return_value = wx.ID_CANCEL
        mock_dialog_class.return_value = mock_dialog

        # Simulate opening the settings dialog
        app.OnSettings(None)

        # Verify the dialog was created with the current settings
        mock_dialog_class.assert_called_once()
        settings_arg = mock_dialog_class.call_args[0][1]
        assert settings_arg["update_interval_minutes"] == 30
        assert settings_arg["api_contact"] == "test@example.com"
        assert settings_arg["alert_radius_miles"] == 25

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_settings_change_applies_and_saves(wx_app, mock_components, temp_config_file):
    """Test that changing settings applies them and saves to the config file."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with the temp config file
    app = WeatherApp(
        parent=parent_frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=mock_notifier,
        config_path=temp_config_file
    )

    # Patch the settings dialog
    with patch('accessiweather.gui.settings_dialog.SettingsDialog') as mock_dialog_class:
        mock_dialog = MagicMock()
        mock_dialog.ShowModal.return_value = wx.ID_OK
        mock_dialog.get_settings.return_value = {
            "update_interval_minutes": 15,
            "api_contact": "new@example.com",
            "alert_radius_miles": 50
        }
        mock_dialog_class.return_value = mock_dialog

        # Patch the timer
        with patch.object(app, 'update_timer') as mock_timer:
            # Simulate opening the settings dialog and changing settings
            app.OnSettings(None)

            # Verify the settings were applied
            assert app.config["settings"]["update_interval_minutes"] == 15
            assert app.config["settings"]["api_contact"] == "new@example.com"
            assert app.config["settings"]["alert_radius_miles"] == 50

            # Verify the timer was restarted with the new interval
            mock_timer.Stop.assert_called_once()
            mock_timer.Start.assert_called_once_with(15 * 60 * 1000, wx.TIMER_CONTINUOUS)

    # Verify the settings were saved to the config file
    with open(temp_config_file, 'r') as f:
        saved_config = json.load(f)

    assert saved_config["settings"]["update_interval_minutes"] == 15
    assert saved_config["settings"]["api_contact"] == "new@example.com"
    assert saved_config["settings"]["alert_radius_miles"] == 50

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_api_contact_change_updates_client(wx_app, mock_components, temp_config_file):
    """Test that changing the API contact updates the API client."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with the temp config file
    app = WeatherApp(
        parent=parent_frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=mock_notifier,
        config_path=temp_config_file
    )

    # Patch the settings dialog
    with patch('accessiweather.gui.settings_dialog.SettingsDialog') as mock_dialog_class:
        mock_dialog = MagicMock()
        mock_dialog.ShowModal.return_value = wx.ID_OK
        mock_dialog.get_settings.return_value = {
            "update_interval_minutes": 30,
            "api_contact": "new@example.com",
            "alert_radius_miles": 25
        }
        mock_dialog_class.return_value = mock_dialog

        # Reset the API client mock
        mock_api_client.reset_mock()

        # Simulate opening the settings dialog and changing settings
        app.OnSettings(None)

        # Verify the API client was updated with the new contact
        mock_api_client.set_contact_info.assert_called_once_with("new@example.com")

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()


def test_alert_radius_change_updates_notifier(wx_app, mock_components, temp_config_file):
    """Test that changing the alert radius updates the notifier."""
    mock_api_client, mock_location_manager, mock_notifier = mock_components

    # Create a parent frame
    parent_frame = wx.Frame(None)

    # Create the app with the temp config file
    app = WeatherApp(
        parent=parent_frame,
        location_manager=mock_location_manager,
        api_client=mock_api_client,
        notifier=mock_notifier,
        config_path=temp_config_file
    )

    # Patch the settings dialog
    with patch('accessiweather.gui.settings_dialog.SettingsDialog') as mock_dialog_class:
        mock_dialog = MagicMock()
        mock_dialog.ShowModal.return_value = wx.ID_OK
        mock_dialog.get_settings.return_value = {
            "update_interval_minutes": 30,
            "api_contact": "test@example.com",
            "alert_radius_miles": 50
        }
        mock_dialog_class.return_value = mock_dialog

        # Reset the notifier mock
        mock_notifier.reset_mock()

        # Simulate opening the settings dialog and changing settings
        app.OnSettings(None)

        # Verify the notifier was updated with the new radius
        mock_notifier.set_alert_radius.assert_called_once_with(50)

    # Clean up
    app.Destroy()
    parent_frame.Destroy()
    wx.SafeYield()
