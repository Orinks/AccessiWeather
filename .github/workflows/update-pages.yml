name: Update GitHub Pages

# NOTE: This workflow dynamically determines which branch to checkout based on the trigger.
# For workflow_run events, it checks out the source branch that triggered the build.
# For manual triggers, it uses the specified branch or defaults to the current branch.
# For release events, it checks out the target branch of the release.
#
# IMPORTANT: This workflow runs AFTER the build workflow completes, not on direct pushes.
# This prevents duplicate runs and ensures build artifacts are available when updating pages.

# TEMPORARILY DISABLED FOR TESTING
# on:
#   # Trigger when build workflow completes successfully on main or dev branches
#   workflow_run:
#     workflows: ["Build and Package"]
#     types:
#       - completed
#     branches: [main, dev]
#   # Trigger when releases are published/edited
#   release:
#     types:
#       - published
#       - edited
#   # Manual trigger
#   workflow_dispatch:
#     inputs:
#       force_update:
#         description: 'Force update pages'
#         required: false
#         type: boolean
#         default: false
#       target_branch:
#         description: 'Target branch for build info (main/dev/both)'
#         required: false
#         type: choice
#         options:
#           - both
#           - main
#           - dev
#         default: both

# Temporary manual-only trigger for testing
on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update pages'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Target branch for build info (main/dev/both)'
        required: false
        type: choice
        options:
          - both
          - main
          - dev
        default: both

permissions:
  contents: read   # Only need read permission since we're not committing back
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-build-info:
    name: Update Build Information
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}

    steps:
    - name: Determine target branch
      id: target-branch
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # For workflow_run events, use the source branch that triggered the build
          TARGET_BRANCH="${{ github.event.workflow_run.head_branch }}"
          echo "Using source branch from workflow_run: $TARGET_BRANCH"
        elif [ "${{ github.event_name }}" = "release" ]; then
          # For release events, use the target branch of the release
          TARGET_BRANCH="${{ github.event.release.target_commitish }}"
          echo "Using target branch from release: $TARGET_BRANCH"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual triggers, use the current branch
          TARGET_BRANCH="${{ github.ref_name }}"
          echo "Using current branch from manual trigger: $TARGET_BRANCH"
        else
          # Fallback to current branch
          TARGET_BRANCH="${{ github.ref_name }}"
          echo "Using fallback current branch: $TARGET_BRANCH"
        fi

        echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        echo "Final target branch: $TARGET_BRANCH"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.target-branch.outputs.target_branch }}
        token: ${{ github.token }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Log trigger information
      run: |
        echo "=== Workflow Trigger Information ==="
        echo "Event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Target branch: ${{ steps.target-branch.outputs.target_branch }}"
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
          echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Source branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Source commit: ${{ github.event.workflow_run.head_sha }}"
        elif [ "${{ github.event_name }}" = "release" ]; then
          echo "Release action: ${{ github.event.action }}"
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Release name: ${{ github.event.release.name }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual trigger"
          echo "Target branch input: ${{ inputs.target_branch }}"
          echo "Force update: ${{ inputs.force_update }}"
        fi
        echo "=================================="

    - name: Get latest build information
      id: build-info
      run: |
        # Get latest successful workflow runs for main and dev branches
        echo "Fetching build information..."

        # Determine which branches to fetch based on input or trigger
        TARGET_BRANCH="${{ steps.target-branch.outputs.target_branch }}"

        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.target_branch }}" != "both" ]; then
          FETCH_BRANCHES="${{ inputs.target_branch }}"
        else
          # Always fetch both main and dev branches to show different information in each section
          # This ensures stable release shows GitHub releases and dev shows latest dev builds
          FETCH_BRANCHES="main dev"
        fi

        echo "Fetching build info for branches: $FETCH_BRANCHES"

        # Function to get latest release info for main branch
        get_release_info() {
          echo "Fetching latest release info..." >&2

          local release_info=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          local tag_name=$(echo "$release_info" | jq -r '.tag_name // empty')
          local published_at=$(echo "$release_info" | jq -r '.published_at // empty')
          local target_commitish=$(echo "$release_info" | jq -r '.target_commitish // empty')

          if [ -n "$tag_name" ] && [ "$tag_name" != "null" ] && [ "$tag_name" != "empty" ]; then
            # Remove 'v' prefix if present (e.g., v0.9.2 -> 0.9.2)
            local version=$(echo "$tag_name" | sed 's/^v//')

            # Format the date nicely
            local formatted_date=$(date -d "$published_at" "+%Y-%m-%d %H:%M UTC" 2>/dev/null || echo "$published_at")

            echo "main_version=${version}"
            echo "main_date=${formatted_date}"
            echo "main_run_id="
            echo "main_commit=${target_commitish}"

            echo "✓ Found release: version=$version, date=$formatted_date" >&2
          else
            echo "main_version=No releases available"
            echo "main_date=N/A"
            echo "main_run_id="
            echo "main_commit="
            echo "⚠ No releases found" >&2
          fi
        }

        # Function to get latest successful run info for dev branch
        get_build_info() {
          local branch=$1
          echo "Fetching build info for branch: $branch" >&2

          local run_info=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs?branch=${branch}&status=success&per_page=1")

          local run_id=$(echo "$run_info" | jq -r '.workflow_runs[0].id // empty')
          local run_date=$(echo "$run_info" | jq -r '.workflow_runs[0].created_at // empty')
          local commit_sha=$(echo "$run_info" | jq -r '.workflow_runs[0].head_sha // empty')

          if [ -n "$run_id" ] && [ "$run_id" != "null" ] && [ "$run_id" != "empty" ]; then
            # Get artifacts for this run
            local artifacts=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${run_id}/artifacts")

            # Extract version from artifact name (assumes format: windows-installer-X.Y.Z)
            local version=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name | startswith("windows-installer-")) | .name' | sed 's/windows-installer-//' | head -1)

            if [ -z "$version" ] || [ "$version" = "null" ] || [ "$version" = "" ]; then
              # Fallback: try to get version from pyproject.toml
              version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || echo "unknown")
            fi

            # Format the date nicely
            local formatted_date=$(date -d "$run_date" "+%Y-%m-%d %H:%M UTC" 2>/dev/null || echo "$run_date")

            echo "${branch}_version=${version}"
            echo "${branch}_date=${formatted_date}"
            echo "${branch}_run_id=${run_id}"
            echo "${branch}_commit=${commit_sha}"

            echo "✓ Found build for $branch: version=$version, date=$formatted_date" >&2
          else
            echo "${branch}_version=No builds available"
            echo "${branch}_date=N/A"
            echo "${branch}_run_id="
            echo "${branch}_commit="
            echo "⚠ No successful builds found for $branch" >&2
          fi
        }

        # Get info for specified branches
        for branch in $FETCH_BRANCHES; do
          if [ "$branch" = "main" ]; then
            # For main branch, get release info from GitHub releases
            get_release_info >> $GITHUB_OUTPUT
          else
            # For other branches (dev, workflow-testing), get build info from workflow runs
            get_build_info "$branch" >> $GITHUB_OUTPUT
          fi
        done

    - name: Fetch release notes and recent commits
      run: |
        echo "📝 Fetching release notes and recent commits..."

        # Fetch latest release notes
        echo "Fetching latest release notes..."
        RELEASE_NOTES=""
        if curl -s "https://api.github.com/repos/Orinks/AccessiWeather/releases/latest" | jq -e '.body' > /dev/null 2>&1; then
          RELEASE_NOTES=$(curl -s "https://api.github.com/repos/Orinks/AccessiWeather/releases/latest" | jq -r '.body // "No release notes available."')

          # Convert markdown to basic HTML for better display
          # Replace markdown headers with HTML headers
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^### \(.*\)/<h5>\1<\/h5>/g')
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^## \(.*\)/<h4>\1<\/h4>/g')
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^# \(.*\)/<h3>\1<\/h3>/g')

          # Replace markdown lists with HTML lists
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^- \(.*\)/<li>\1<\/li>/g')
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^\* \(.*\)/<li>\1<\/li>/g')

          # Wrap consecutive list items in ul tags
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed ':a;N;$!ba;s/<li>\([^<]*\)<\/li>\n<li>/<ul><li>\1<\/li>\n<li>/g')
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/<\/li>\n\([^<]*\)$/<\/li><\/ul>\n\1/g')
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/<\/li>$/<\/li><\/ul>/g')

          # Replace newlines with <br> for proper HTML display
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed ':a;N;$!ba;s/\n\([^<]\)/<br>\1/g')

          echo "✓ Fetched release notes (${#RELEASE_NOTES} characters)"
        else
          RELEASE_NOTES="<p>No release notes available. <a href=\"https://github.com/Orinks/AccessiWeather/releases/latest\" target=\"_blank\">View on GitHub</a></p>"
          echo "⚠ No release found, using fallback message"
        fi

        # Fetch recent commits from dev branch
        echo "Fetching recent commits from dev branch..."
        DEV_COMMITS=""
        if curl -s "https://api.github.com/repos/Orinks/AccessiWeather/commits?sha=dev&per_page=3" | jq -e '.[0]' > /dev/null 2>&1; then
          DEV_COMMITS=$(curl -s "https://api.github.com/repos/Orinks/AccessiWeather/commits?sha=dev&per_page=3" | jq -r '.[] | "<li>" + .commit.message + "</li>"' | tr '\n' ' ')
          echo "✓ Fetched recent commits (${#DEV_COMMITS} characters)"
        else
          DEV_COMMITS="<li>Unable to fetch recent commits. <a href=\"https://github.com/Orinks/AccessiWeather/commits/dev\" target=\"_blank\">View on GitHub</a></li>"
          echo "⚠ Failed to fetch commits, using fallback message"
        fi

        # Save to environment for next step
        {
          echo "RELEASE_NOTES<<EOF"
          echo "$RELEASE_NOTES"
          echo "EOF"
          echo "DEV_COMMITS<<EOF"
          echo "$DEV_COMMITS"
          echo "EOF"
        } >> $GITHUB_ENV

        echo "✓ Release notes and commits data prepared"

    - name: Generate HTML from template
      run: |
        # Copy template to root directory and substitute values
        cp docs/index.template.html index.html

        # Get current timestamp
        LAST_UPDATED=$(date -u +"%Y-%m-%d %H:%M UTC")

        # Get build info values with fallbacks
        TARGET_BRANCH="${{ steps.target-branch.outputs.target_branch }}"
        MAIN_VERSION="${{ steps.build-info.outputs.main_version }}"
        MAIN_DATE="${{ steps.build-info.outputs.main_date }}"
        MAIN_COMMIT="${{ steps.build-info.outputs.main_commit }}"

        # Always use dev branch information for development section when available
        # This ensures we show different versions: stable release vs latest dev build
        DEV_VERSION="${{ steps.build-info.outputs.dev_version }}"
        DEV_DATE="${{ steps.build-info.outputs.dev_date }}"
        DEV_COMMIT="${{ steps.build-info.outputs.dev_commit }}"

        # If dev branch info is not available, fall back to target branch or generic values
        if [ -z "$DEV_VERSION" ] || [ "$DEV_VERSION" = "No builds available" ]; then
          case "$TARGET_BRANCH" in
            "main")
              DEV_VERSION="Development (latest)"
              DEV_DATE="Check nightly.link"
              DEV_COMMIT=""
              ;;
            *)
              DEV_VERSION="Development ($TARGET_BRANCH)"
              DEV_DATE="Check nightly.link"
              DEV_COMMIT=""
              ;;
          esac
        fi

        # Apply fallbacks if values are empty
        [ -z "$MAIN_VERSION" ] && MAIN_VERSION="Latest Release"
        [ -z "$MAIN_DATE" ] && MAIN_DATE="Check GitHub"
        [ -z "$MAIN_COMMIT" ] && MAIN_COMMIT=""
        [ -z "$DEV_VERSION" ] && DEV_VERSION="Development ($TARGET_BRANCH)"
        [ -z "$DEV_DATE" ] && DEV_DATE="Check nightly.link"
        [ -z "$DEV_COMMIT" ] && DEV_COMMIT=""

        # Escape special characters for sed (but preserve HTML in release notes)
        MAIN_VERSION=$(echo "$MAIN_VERSION" | sed 's/[[\.*^$()+?{|]/\\&/g')
        MAIN_DATE=$(echo "$MAIN_DATE" | sed 's/[[\.*^$()+?{|]/\\&/g')
        MAIN_COMMIT=$(echo "$MAIN_COMMIT" | sed 's/[[\.*^$()+?{|]/\\&/g')
        DEV_VERSION=$(echo "$DEV_VERSION" | sed 's/[[\.*^$()+?{|]/\\&/g')
        DEV_DATE=$(echo "$DEV_DATE" | sed 's/[[\.*^$()+?{|]/\\&/g')
        DEV_COMMIT=$(echo "$DEV_COMMIT" | sed 's/[[\.*^$()+?{|]/\\&/g')
        LAST_UPDATED_ESCAPED=$(echo "$LAST_UPDATED" | sed 's/[[\.*^$()+?{|]/\\&/g')



        # Substitute template variables with actual values
        sed -i "s/{{MAIN_VERSION}}/$MAIN_VERSION/g" index.html
        sed -i "s/{{MAIN_DATE}}/$MAIN_DATE/g" index.html
        sed -i "s/{{MAIN_COMMIT}}/$MAIN_COMMIT/g" index.html
        sed -i "s/{{DEV_VERSION}}/$DEV_VERSION/g" index.html
        sed -i "s/{{DEV_DATE}}/$DEV_DATE/g" index.html
        sed -i "s/{{DEV_COMMIT}}/$DEV_COMMIT/g" index.html
        sed -i "s/{{LAST_UPDATED}}/$LAST_UPDATED_ESCAPED/g" index.html

        # Substitute release notes and commits using a more robust method
        # Create temporary files to handle multiline content safely
        echo "$RELEASE_NOTES" > /tmp/release_notes.txt
        echo "$DEV_COMMITS" > /tmp/dev_commits.txt

        # Use awk to replace the placeholders with file content
        awk '
        /{{MAIN_RELEASE_NOTES}}/ {
            while ((getline line < "/tmp/release_notes.txt") > 0) {
                print line
            }
            close("/tmp/release_notes.txt")
            next
        }
        /{{DEV_RECENT_COMMITS}}/ {
            while ((getline line < "/tmp/dev_commits.txt") > 0) {
                print line
            }
            close("/tmp/dev_commits.txt")
            next
        }
        { print }
        ' index.html > index_tmp.html && mv index_tmp.html index.html

        echo "✓ Generated index.html from template with build info:"
        echo "  Stable Release (main): ${{ steps.build-info.outputs.main_version }} (${{ steps.build-info.outputs.main_date }})"
        echo "  Development Build (dev): $DEV_VERSION ($DEV_DATE)"
        echo "  Release notes: ${#RELEASE_NOTES} characters"
        echo "  Recent commits: ${#DEV_COMMITS} characters"
        echo "  Last updated: $LAST_UPDATED"
        echo "  Triggered by: ${{ github.event_name }}"
        echo "  Source branch: $TARGET_BRANCH"

        # Verify substitution worked
        if grep -q "{{" index.html; then
          echo "⚠ Warning: Some template variables may not have been substituted:"
          grep -o "{{[^}]*}}" index.html || true
        else
          echo "✓ All template variables successfully substituted"
        fi

        # Check if release notes and commits were added
        if grep -q "release-notes" index.html; then
          echo "✓ Release notes sections found in generated HTML"
        else
          echo "⚠ Release notes sections not found"
        fi

        # Check for specific content
        if grep -q "Recent Changes" index.html; then
          echo "✓ Recent changes section found"
        fi
        if grep -q "Release Notes" index.html; then
          echo "✓ Release notes section found"
        fi

    - name: Create nightly.link URLs documentation
      run: |
        # Get build info with fallbacks
        TARGET_BRANCH="${{ steps.target-branch.outputs.target_branch }}"
        MAIN_VERSION="${{ steps.build-info.outputs.main_version }}"
        MAIN_DATE="${{ steps.build-info.outputs.main_date }}"
        DEV_VERSION="${{ steps.build-info.outputs.dev_version }}"
        DEV_DATE="${{ steps.build-info.outputs.dev_date }}"

        [ -z "$MAIN_VERSION" ] && MAIN_VERSION="latest"
        [ -z "$MAIN_DATE" ] && MAIN_DATE="Check GitHub"
        [ -z "$DEV_VERSION" ] && DEV_VERSION="latest"
        [ -z "$DEV_DATE" ] && DEV_DATE="Check nightly.link"

        # Always use dev branch for development URLs since we always fetch dev info
        DEV_BRANCH_NAME="dev"

        cat > docs/download-links.md << EOF
        # AccessiWeather Download Links

        ## Stable Release (Main Branch)

        ### Direct Downloads:
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-installer-${MAIN_VERSION}.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-portable-${MAIN_VERSION}.zip

        ## Development Release (${DEV_BRANCH_NAME^} Branch)

        ### Direct Downloads:
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/${DEV_BRANCH_NAME}/windows-installer-${DEV_VERSION}.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/${DEV_BRANCH_NAME}/windows-portable-${DEV_VERSION}.zip

        ## How to Use

        1. Choose your preferred download:
           - **Installer**: Download and run for guided installation
           - **Portable**: Download and extract for no-install usage
        2. No GitHub login required for public downloads
        3. Links always point to the latest successful build
        4. Each download is a separate, focused package

        ## Build Information

        - **Main Version**: ${MAIN_VERSION}
        - **Main Build Date**: ${MAIN_DATE}
        - **${DEV_BRANCH_NAME^} Version**: ${DEV_VERSION}
        - **${DEV_BRANCH_NAME^} Build Date**: ${DEV_DATE}
        - **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        EOF

        echo "✓ Created download links documentation for main and $DEV_BRANCH_NAME branches"

    - name: Disable Jekyll processing
      run: |
        # Create .nojekyll file to disable Jekyll processing
        # This ensures our static HTML is served as-is without Jekyll interference
        touch .nojekyll
        echo "✓ Created .nojekyll file to disable Jekyll processing"

    - name: Validate generated files
      run: |
        echo "📋 Validating generated files..."

        # Check if index.html exists and has content
        if [ -f "index.html" ]; then
          echo "✓ index.html exists ($(wc -l < index.html) lines)"

          # Check for remaining template variables
          if grep -q "{{" index.html; then
            echo "⚠ Warning: Found remaining template variables:"
            grep -n "{{[^}]*}}" index.html || true
          else
            echo "✓ No template variables remaining"
          fi

          # Check for key content
          if grep -q "AccessiWeather" index.html; then
            echo "✓ Contains expected content"
          else
            echo "❌ Missing expected content"
          fi
        else
          echo "❌ index.html not found!"
          exit 1
        fi

        # Check download-links.md
        if [ -f "docs/download-links.md" ]; then
          echo "✓ download-links.md exists ($(wc -l < docs/download-links.md) lines)"
        else
          echo "⚠ download-links.md not found"
        fi

        echo "📋 File validation complete"

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: ./

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: update-build-info
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
