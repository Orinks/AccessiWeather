name: Update GitHub Pages

on:
  workflow_run:
    workflows: ["Build and Package"]
    types:
      - completed
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update pages'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-build-info:
    name: Update Build Information
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Get latest build information
      id: build-info
      run: |
        # Get latest successful workflow runs for main and dev branches
        echo "Fetching build information..."

        # Function to get latest successful run info
        get_build_info() {
          local branch=$1
          local run_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs?branch=${branch}&status=success&per_page=1")

          local run_id=$(echo "$run_info" | jq -r '.workflow_runs[0].id // empty')
          local run_date=$(echo "$run_info" | jq -r '.workflow_runs[0].created_at // empty')
          local commit_sha=$(echo "$run_info" | jq -r '.workflow_runs[0].head_sha // empty')

          if [ -n "$run_id" ] && [ "$run_id" != "null" ]; then
            # Get artifacts for this run
            local artifacts=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${run_id}/artifacts")

            # Extract version from artifact name (assumes format: windows-installer-X.Y.Z)
            local version=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name | startswith("windows-installer-")) | .name' | sed 's/windows-installer-//')

            if [ -z "$version" ] || [ "$version" = "null" ]; then
              # Fallback: try to get version from pyproject.toml
              version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || echo "unknown")
            fi

            echo "${branch}_version=${version}"
            echo "${branch}_date=${run_date}"
            echo "${branch}_run_id=${run_id}"
            echo "${branch}_commit=${commit_sha}"
          else
            echo "${branch}_version=No builds available"
            echo "${branch}_date=N/A"
            echo "${branch}_run_id="
            echo "${branch}_commit="
          fi
        }

        # Get info for both branches
        get_build_info "main" >> $GITHUB_OUTPUT
        get_build_info "dev" >> $GITHUB_OUTPUT

    - name: Generate build info JSON
      run: |
        # Create build-info.json for the website
        cat > docs/build-info.json << EOF
        {
          "main": {
            "version": "${{ steps.build-info.outputs.main_version }}",
            "date": "${{ steps.build-info.outputs.main_date }}",
            "commit": "${{ steps.build-info.outputs.main_commit }}",
            "installerUrl": "https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-installer-${{ steps.build-info.outputs.main_version }}.zip",
            "portableUrl": "https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-build-${{ steps.build-info.outputs.main_version }}.zip",
            "installerUrlGeneric": "https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-installer.zip",
            "portableUrlGeneric": "https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-build.zip"
          },
          "dev": {
            "version": "${{ steps.build-info.outputs.dev_version }}",
            "date": "${{ steps.build-info.outputs.dev_date }}",
            "commit": "${{ steps.build-info.outputs.dev_commit }}",
            "installerUrl": "https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-installer-${{ steps.build-info.outputs.dev_version }}.zip",
            "portableUrl": "https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-build-${{ steps.build-info.outputs.dev_version }}.zip",
            "installerUrlGeneric": "https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-installer.zip",
            "portableUrlGeneric": "https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-build.zip"
          },
          "lastUpdated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        }
        EOF

        echo "Generated build-info.json:"
        cat docs/build-info.json

    - name: Create nightly.link URLs documentation
      run: |
        cat > docs/download-links.md << 'EOF'
        # AccessiWeather Download Links

        ## Stable Release (Main Branch)

        ### Direct download URLs (latest build):
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-installer.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-build.zip

        ### Specific version URLs:
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-installer-${{ steps.build-info.outputs.main_version }}.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/main/windows-build-${{ steps.build-info.outputs.main_version }}.zip

        ## Development Release (Dev Branch)

        ### Direct download URLs (latest build):
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-installer.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-build.zip

        ### Specific version URLs:
        - **Installer**: https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-installer-${{ steps.build-info.outputs.dev_version }}.zip
        - **Portable**: https://nightly.link/Orinks/AccessiWeather/workflows/build/dev/windows-build-${{ steps.build-info.outputs.dev_version }}.zip

        ## How to Use

        1. Click any of the above links to download the latest build
        2. No GitHub login required for public downloads
        3. Links always point to the latest successful build
        4. Installer version includes setup wizard
        5. Portable version runs without installation

        ## Build Information

        - **Main Version**: ${{ steps.build-info.outputs.main_version }}
        - **Main Build Date**: ${{ steps.build-info.outputs.main_date }}
        - **Dev Version**: ${{ steps.build-info.outputs.dev_version }}
        - **Dev Build Date**: ${{ steps.build-info.outputs.dev_date }}
        - **Last Updated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        EOF

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Check if there are changes to commit
        if git diff --quiet docs/build-info.json docs/download-links.md; then
          echo "No changes to commit"
        else
          git add docs/build-info.json docs/download-links.md
          git commit -m "Update build information and download links

          - Main: ${{ steps.build-info.outputs.main_version }} (${{ steps.build-info.outputs.main_date }})
          - Dev: ${{ steps.build-info.outputs.dev_version }} (${{ steps.build-info.outputs.dev_date }})"
          git push
        fi

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: update-build-info
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
