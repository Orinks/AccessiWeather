name: Continuous Integration

on:
  push:
    branches: [ main, dev, feature/cicd-pipeline ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install -r requirements-dev.txt

    - name: Set up virtual display for GUI tests
      run: |
        # Set environment variable to prevent wxPython from requiring a display
        echo "DISPLAY=" >> $GITHUB_ENV
        echo "PYTEST_DISABLE_PLUGIN_AUTOLOAD=1" >> $GITHUB_ENV

    - name: Verify pre-commit hooks configuration
      run: |
        pip install pre-commit
        pre-commit --version
        pre-commit install --install-hooks

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run unit tests
      run: |
        # Run tests with wxPython headless mode
        python -m pytest tests/ -v --tb=short --cov=src/accessiweather --cov-report=xml --cov-report=html
      env:
        # Prevent wxPython from trying to create a display
        DISPLAY: ""
        # Disable GUI-related warnings
        PYTHONPATH: src

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.12'
      with:
        name: coverage-report
        path: htmlcov/

  lint:
    name: Code Quality
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -e .[dev]

    - name: Check code formatting with black
      run: |
        black --check --line-length=100 src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --profile black --line-length 100 src/ tests/

    - name: Run flake8 linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503,E501,F541

    - name: Run mypy type checking
      run: |
        mypy src/accessiweather --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .[dev]

    - name: Run bandit security linting
      run: |
        bandit -r src/accessiweather -f json -o bandit-report.json
        bandit -r src/accessiweather

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration:
    name: Integration Tests
    runs-on: windows-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run integration tests
      run: |
        python -m pytest tests/gui/ tests/services/ -v --tb=short -m "not slow"
      env:
        # Prevent wxPython from trying to create a display
        DISPLAY: ""
        PYTHONPATH: src

    - name: Test application startup (headless)
      run: |
        # Test import without creating GUI
        python -c "
        import os
        os.environ['DISPLAY'] = ''
        try:
            import src.accessiweather.main
            print('✓ Application imports successfully')
        except Exception as e:
            print(f'✗ Import failed: {e}')
            raise
        "
      env:
        DISPLAY: ""
        PYTHONPATH: src

  quality-gate:
    name: Quality Gate
    runs-on: windows-latest
    needs: [test, lint, security, integration]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Test job status: ${{ needs.test.result }}"
        echo "Lint job status: ${{ needs.lint.result }}"
        echo "Security job status: ${{ needs.security.result }}"
        echo "Integration job status: ${{ needs.integration.result }}"

        if [ "${{ needs.test.result }}" != "success" ] ||
           [ "${{ needs.lint.result }}" != "success" ] ||
           [ "${{ needs.security.result }}" != "success" ] ||
           [ "${{ needs.integration.result }}" != "success" ]; then
          echo "Quality gate failed - one or more checks did not pass"
          exit 1
        fi

        echo "Quality gate passed - all checks successful"
      shell: bash
