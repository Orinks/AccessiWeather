name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request: # Triggers on PRs targeting any branch

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    env:
      ACCESSIWEATHER_TESTING: "1"
      ACCESSIWEATHER_SKIP_API_CALLS: "1"
      ACCESSIWEATHER_HEADLESS: "1"
      PYTHONPATH: "src"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install project in editable mode without GUI dependencies
        pip install -e .
        # Install development/testing dependencies
        if (Test-Path "requirements-dev.txt") {
            pip install -r requirements-dev.txt
        } else {
            echo "Warning: requirements-dev.txt not found."
            # Install essential test deps and formatters as fallback
            pip install flake8 pytest pytest-mock pytest-timeout black isort
            # Install specific dependencies needed for the project
            pip install requests plyer python-dateutil mock geopy
        }

    - name: Check formatting with isort
      run: |
        isort --check .

    - name: Check formatting with black
      run: |
        black --check .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --max-complexity=10 --max-line-length=100 --statistics

    - name: Check API connectivity
      run: |
        python -c "import requests; print('NOAA API Status:', requests.get('https://api.weather.gov/').status_code)"
      continue-on-error: true

    - name: List test files
      run: |
        echo "Test files found:"
        Get-ChildItem -Path tests -Filter *.py -Recurse | ForEach-Object { $_.FullName }

    - name: Setup CI test environment
      run: |
        echo "Setting up CI test environment"
        $sourceConfig = "tests/ci_config.json"
        if (-not (Test-Path $sourceConfig)) {
            Write-Error "CI configuration file not found at $sourceConfig"
            exit 1
        }
        # Copy CI config to the expected location
        $configDir = Join-Path $env:USERPROFILE ".accessiweather"
        if (-not (Test-Path $configDir)) {
            New-Item -Path $configDir -ItemType Directory -Force
        }
        $configFile = Join-Path $configDir "config.json"
        Copy-Item -Path $sourceConfig -Destination $configFile -Force
        echo "CI config copied from $sourceConfig to $configFile"

    - name: Test with pytest
      run: |
        pytest tests/ -vv --tb=short -k "not (test_gui or test_accessible_combo_box or test_location_dialog or test_location_combobox or test_gui_loading or test_get_point_data_real or test_get_alerts_real or test_get_discussion_real)"
